3. Explain the process of deleting a node from a binary search tree in Python. Discuss how you would handle different cases, such as deleting a node with one, or two children. Additionally, explain any potential challenges or edge cases that may arise during the deletion process and how you would address them. 

When deleting a node from a binary search 3, there are three different ways depending on if there are no children, one child, or two children. You first have to start by checking to see if the node has children. If there are no children, you can just change the node to None. If there is one child, then you replace the node with the child. However, with two children it is a little harder. For this you have to find the inorder successor or the inorder predecessor, which is either the smallest child on the right side or the largest child on the left side. You then replace the node with this value.

Some of the biggest challenges that may arise from this are that it can cause the tree to become unbalanced, which could require you to have to go through work to rebalance it. Duplicates can also be an issue, and you have to make sure to delete the first duplicate first.